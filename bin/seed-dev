#!/usr/bin/env node
const _ = require('lodash');

const mongo = require('mongodb');
const { readJsonSync, readFileSync } = require('fs-extra');

const minimist = require('minimist');
const { join, resolve } = require('path');

const args = minimist(process.argv.slice(0, 2));

console.log(args);
const uri = args.uri || process.env.MONGO_URI || 'mongodb://localhost:27017/pie-store-demo';

const readItem = (dir) => {
  const config = readJsonSync(join(dir, 'config.json'));
  const markup = readFileSync(join(dir, 'index.html'));
  const paths = {
    controllers: resolve(join(dir, 'pie-controllers.js')),
    view: resolve(join(dir, 'pie-view.js'))
  }

  return _.merge({}, config, { markup, paths });
}

const readItems = (paths) => paths.map(p => readItem(resolve(__dirname, p)));

const items = readItems([
  '../seed/dev/items/one',
]);

const seedItems = (c) => {
  return Promise.all(items.map(i => {
    return c.insert(i)
      .then(() => {
        console.log('inserted: ', i);
      });
  }));
};

mongo.MongoClient.connect(uri)
  .then((client) => {
    console.log(client.databaseName)
    const db = client.db(client.databaseName);
    console.log('db: ', db);
    const collection = db.collection('items');
    console.log('collection: ', collection);
    return db.collection('sessions').remove({})
      .then(() => collection.remove({}))
      .then(() => collection);
  })
  .then(seedItems)
  .then(() => {
    process.exit(0);
  })
  .catch(e => {
    console.error(e)
    process.exit(1);
  });
