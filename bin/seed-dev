#!/usr/bin/env node

/**
 * Opts: 
 * 
 * --bucket - the s3 bucket name
 * --prefix - the s3 prefix within the bucket
 * --uri - the mongo uri
 */

const _ = require('lodash');

const mongo = require('mongodb');
const { readJsonSync, readFileSync, existsSync } = require('fs-extra');

const minimist = require('minimist');
const { join, resolve, basename, dirname } = require('path');
const { exec } = require('child_process');

const args = minimist(process.argv.slice(2));

console.log(args);

const uri = args.uri || process.env.MONGO_URI || 'mongodb://localhost:27017/pie-store-demo';

const readItemInfo = (dir) => {
  const config = readJsonSync(join(dir, 'config.json'));
  const markup = readFileSync(join(dir, 'index.html'), 'utf8');
  const paths = {
    controllers: join(basename(dir), 'pie-controllers.js'),
    view: join(basename(dir), 'pie-view.js')
  }
  return _.merge({}, config, { markup, paths });
}

const copyPathToS3 = (bucket, prefix, path, cwd) => {

  console.log('copyPathToS3, bucket: ', bucket, 'prefix: ', prefix);

  return new Promise((resolve, reject) => {

    const dir = basename(cwd);
    const cmd = `aws s3 cp ${path} s3://${bucket}/${prefix}/built-pies/${dir}/${path}`;
    console.log('[copyPathToS3] cmd: ', cmd);
    exec(cmd, { cwd }, (err, stdout, stderr) => {
      if (err) {
        reject(err);
      } else {
        console.log(stdout);
        resolve();
      }
    });
  });
}

const copyPathsToS3 = (bucket, prefix, cwd) => {
  return Promise.all([
    copyPathToS3(bucket, prefix, 'pie-controllers.js', cwd),
    copyPathToS3(bucket, prefix, 'pie-view.js', cwd)
  ]);
}

const maybePackPies = (cwd) => {
  return new Promise((res, reject) => {
    if (
      existsSync(join(cwd, 'pie-controllers.js')) &&
      existsSync(join(cwd, 'pie-view.js'))) {
      console.log('skip packing - assets exist');
      res();
    } else {
      exec('pie pack', { cwd }, (err, stdout, stderr) => {
        if (err) {
          reject(err);
        } else {
          console.log(stdout);
          res();
        }
      });
    }
  });
}

const maybeCopyToS3 = (cwd) => {
  console.log('maybeCopyToS3, cwd: ', cwd);

  const { bucket, prefix } = args;
  if (bucket && prefix) {
    return copyPathsToS3(bucket, prefix, cwd);
  } else {
    return Promise.resolve();
  };
}

const buildAndRead = (cwd) => {

  console.log('[buildAndRead] cwd: ', cwd);
  return maybePackPies(cwd)
    .then(() => {
      console.log('next');
      return null;
    })
    .then(() => maybeCopyToS3(cwd))
    .then(() => readItemInfo(cwd))
    .catch(e => console.error(e));
}

const buildAndReadItems = (paths) => paths.map(p => buildAndRead(resolve(__dirname, p)));

const builtItems = buildAndReadItems([
  '../seed/dev/items/one',
]);

const rmUsers = (db) => {
  const coll = db.collection('users');

  if (coll) {
    return coll.drop().then(() => db)
      .catch(() => db);
  } else {
    return db;
  }
}

const seedUsers = (db) => {
  return db.collection('users').insert(
    { username: 'ed', password: 'ed' }
  ).then(() => db);
}

Promise.all(builtItems)
  .then(items => {

    console.log('items: ', items);

    const seedItems = (db) => {
      const collection = db.collection('items');
      return Promise.all(items.map(i => {
        i.username = 'ed';
        return collection.insert(i)
          .then(() => {
            console.log('inserted: ', i);
          });
      })).then(() => db);
    };

    mongo.MongoClient.connect(uri)
      .then((client) => {
        console.log('databaseName: ', client.databaseName);
        const db = client.db(client.databaseName);
        const collection = db.collection('items');
        return db.collection('sessions').remove({})
          .then(() => collection.remove({}))
          .then(() => db);
      })
      .then(seedItems)
      .then(rmUsers)
      .then(seedUsers)
      .then(() => {
        process.exit(0);
      })
      .catch(e => {
        console.error(e)
        process.exit(1);
      });

  })