#!/usr/bin/env node

/**
 * Opts: 
 * 
 * --bucket - the s3 bucket name
 * --prefix - the s3 prefix within the bucket
 * --uri - the mongo uri
 */

const _ = require('lodash');

const mongo = require('mongodb');
const { readJsonSync, readFileSync, existsSync } = require('fs-extra');

const minimist = require('minimist');
const { join, resolve, basename } = require('path');
const { exec } = require('child_process');

const args = minimist(process.argv.slice(0, 2));

console.log(args);

const uri = args.uri || process.env.MONGO_URI || 'mongodb://localhost:27017/pie-store-demo';

const readItemInfo = (dir) => {
  const config = readJsonSync(join(dir, 'config.json'));
  const markup = readFileSync(join(dir, 'index.html'));
  const paths = {
    controllers: join(basename(dir), 'pie-controllers.js'),
    view: join(basename(dir), 'pie-view.js')
  }
  return _.merge({}, config, { markup, paths });
}

const copyPathToS3 = (bucket, prefix, path, cwd) => {

  console.log('copyPathToS3, bucket: ', bucket, 'prefix: ', prefix);

  return new Promise((resolve, reject) => {
    exec(`aws s3 cp ${path} s3://${bucket}/${prefix}/built-pies/${path}`, { cwd }, (err) => {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    });
  });
}

const copyPathsToS3 = (bucket, prefix, cwd) => {
  return Promise.all([
    copyPathToS3(bucket, prefix, 'pie-controllers.js', cwd),
    copyPathToS3(bucket, prefix, 'pie-view.js', cwd)
  ]);
}

const maybePackPies = (cwd) => {
  return new Promise((res, reject) => {
    if (
      existsSync(join(cwd, 'pie-controllers.js')) &&
      existsSync(join(cwd, 'pie-view.js'))) {
      console.log('skip packing - assets exist');
      resolve();
    } else {
      exec('pie pack', { cwd }, (err, stdout, stderr) => {
        if (err) {
          reject(err);
        } else {
          res(info);
        }
      });
    }
  });
}

const maybeCopyToS3 = (cwd) => {
  const { bucket, prefix } = args;
  if (bucket && prefix) {
    return copyPathsToS3(bucket, prefix, cwd);
  } else {
    return Promise.resolve();
  };
}

const buildAndRead = (cwd) => {
  return maybePackPies(cwd)
    .then(() => maybeCopyToS3(cwd))
    .then(() => readItemInfo(cwd))
}

const buildAndReadItems = (paths) => paths.map(p => buildAndRead(resolve(__dirname, p)));

const builtItems = buildAndReadItems([
  '../seed/dev/items/one',
]);


Promise.all(builtItems)
  .then(items => {

    const seedItems = (c) => {
      return Promise.all(items.map(i => {
        return c.insert(i)
          .then(() => {
            console.log('inserted: ', i);
          });
      }));
    };

    mongo.MongoClient.connect(uri)
      .then((client) => {
        console.log(client.databaseName)
        const db = client.db(client.databaseName);
        console.log('db: ', db);
        const collection = db.collection('items');
        console.log('collection: ', collection);
        return db.collection('sessions').remove({})
          .then(() => collection.remove({}))
          .then(() => collection);
      })
      .then(seedItems)
      .then(() => {
        process.exit(0);
      })
      .catch(e => {
        console.error(e)
        process.exit(1);
      });

  })